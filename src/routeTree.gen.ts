/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoomrootImport } from './routes/$room/__root'

// Create Virtual Routes

const RoomImport = createFileRoute('/$room')()
const IndexLazyImport = createFileRoute('/')()
const RoomScreenLazyImport = createFileRoute('/$room/screen')()
const RoomProducerLazyImport = createFileRoute('/$room/producer')()
const RoomHostLazyImport = createFileRoute('/$room/host')()
const RoomContestantRightLazyImport = createFileRoute(
  '/$room/contestant/right',
)()
const RoomContestantLeftLazyImport = createFileRoute('/$room/contestant/left')()

// Create/Update Routes

const RoomrootRoute = RoomrootImport.update({
  id: '/__root',
  getParentRoute: () => RoomRoute,
} as any)

const RoomRoute = RoomImport.update({
  id: '/$room',
  path: '/$room',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RoomScreenLazyRoute = RoomScreenLazyImport.update({
  id: '/screen',
  path: '/screen',
  getParentRoute: () => RoomRoute,
} as any).lazy(() => import('./routes/$room/screen.lazy').then((d) => d.Route))

const RoomProducerLazyRoute = RoomProducerLazyImport.update({
  id: '/producer',
  path: '/producer',
  getParentRoute: () => RoomRoute,
} as any).lazy(() =>
  import('./routes/$room/producer.lazy').then((d) => d.Route),
)

const RoomHostLazyRoute = RoomHostLazyImport.update({
  id: '/host',
  path: '/host',
  getParentRoute: () => RoomRoute,
} as any).lazy(() => import('./routes/$room/host.lazy').then((d) => d.Route))

const RoomContestantRightLazyRoute = RoomContestantRightLazyImport.update({
  id: '/contestant/right',
  path: '/contestant/right',
  getParentRoute: () => RoomRoute,
} as any).lazy(() =>
  import('./routes/$room/contestant/right.lazy').then((d) => d.Route),
)

const RoomContestantLeftLazyRoute = RoomContestantLeftLazyImport.update({
  id: '/contestant/left',
  path: '/contestant/left',
  getParentRoute: () => RoomRoute,
} as any).lazy(() =>
  import('./routes/$room/contestant/left.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/$room': {
      id: '/$room'
      path: '/$room'
      fullPath: '/$room'
      preLoaderRoute: typeof RoomImport
      parentRoute: typeof rootRoute
    }
    '/$room/__root': {
      id: '/$room/__root'
      path: '/$room'
      fullPath: '/$room'
      preLoaderRoute: typeof RoomrootImport
      parentRoute: typeof RoomRoute
    }
    '/$room/host': {
      id: '/$room/host'
      path: '/host'
      fullPath: '/$room/host'
      preLoaderRoute: typeof RoomHostLazyImport
      parentRoute: typeof RoomImport
    }
    '/$room/producer': {
      id: '/$room/producer'
      path: '/producer'
      fullPath: '/$room/producer'
      preLoaderRoute: typeof RoomProducerLazyImport
      parentRoute: typeof RoomImport
    }
    '/$room/screen': {
      id: '/$room/screen'
      path: '/screen'
      fullPath: '/$room/screen'
      preLoaderRoute: typeof RoomScreenLazyImport
      parentRoute: typeof RoomImport
    }
    '/$room/contestant/left': {
      id: '/$room/contestant/left'
      path: '/contestant/left'
      fullPath: '/$room/contestant/left'
      preLoaderRoute: typeof RoomContestantLeftLazyImport
      parentRoute: typeof RoomImport
    }
    '/$room/contestant/right': {
      id: '/$room/contestant/right'
      path: '/contestant/right'
      fullPath: '/$room/contestant/right'
      preLoaderRoute: typeof RoomContestantRightLazyImport
      parentRoute: typeof RoomImport
    }
  }
}

// Create and export the route tree

interface RoomRouteChildren {
  RoomrootRoute: typeof RoomrootRoute
  RoomHostLazyRoute: typeof RoomHostLazyRoute
  RoomProducerLazyRoute: typeof RoomProducerLazyRoute
  RoomScreenLazyRoute: typeof RoomScreenLazyRoute
  RoomContestantLeftLazyRoute: typeof RoomContestantLeftLazyRoute
  RoomContestantRightLazyRoute: typeof RoomContestantRightLazyRoute
}

const RoomRouteChildren: RoomRouteChildren = {
  RoomrootRoute: RoomrootRoute,
  RoomHostLazyRoute: RoomHostLazyRoute,
  RoomProducerLazyRoute: RoomProducerLazyRoute,
  RoomScreenLazyRoute: RoomScreenLazyRoute,
  RoomContestantLeftLazyRoute: RoomContestantLeftLazyRoute,
  RoomContestantRightLazyRoute: RoomContestantRightLazyRoute,
}

const RoomRouteWithChildren = RoomRoute._addFileChildren(RoomRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/$room': typeof RoomrootRoute
  '/$room/host': typeof RoomHostLazyRoute
  '/$room/producer': typeof RoomProducerLazyRoute
  '/$room/screen': typeof RoomScreenLazyRoute
  '/$room/contestant/left': typeof RoomContestantLeftLazyRoute
  '/$room/contestant/right': typeof RoomContestantRightLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$room': typeof RoomrootRoute
  '/$room/host': typeof RoomHostLazyRoute
  '/$room/producer': typeof RoomProducerLazyRoute
  '/$room/screen': typeof RoomScreenLazyRoute
  '/$room/contestant/left': typeof RoomContestantLeftLazyRoute
  '/$room/contestant/right': typeof RoomContestantRightLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/$room': typeof RoomRouteWithChildren
  '/$room/__root': typeof RoomrootRoute
  '/$room/host': typeof RoomHostLazyRoute
  '/$room/producer': typeof RoomProducerLazyRoute
  '/$room/screen': typeof RoomScreenLazyRoute
  '/$room/contestant/left': typeof RoomContestantLeftLazyRoute
  '/$room/contestant/right': typeof RoomContestantRightLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$room'
    | '/$room/host'
    | '/$room/producer'
    | '/$room/screen'
    | '/$room/contestant/left'
    | '/$room/contestant/right'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$room'
    | '/$room/host'
    | '/$room/producer'
    | '/$room/screen'
    | '/$room/contestant/left'
    | '/$room/contestant/right'
  id:
    | '__root__'
    | '/'
    | '/$room'
    | '/$room/__root'
    | '/$room/host'
    | '/$room/producer'
    | '/$room/screen'
    | '/$room/contestant/left'
    | '/$room/contestant/right'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RoomRoute: typeof RoomRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RoomRoute: RoomRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$room"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$room": {
      "filePath": "$room",
      "children": [
        "/$room/__root",
        "/$room/host",
        "/$room/producer",
        "/$room/screen",
        "/$room/contestant/left",
        "/$room/contestant/right"
      ]
    },
    "/$room/__root": {
      "filePath": "$room/__root.tsx",
      "parent": "/$room"
    },
    "/$room/host": {
      "filePath": "$room/host.lazy.tsx",
      "parent": "/$room"
    },
    "/$room/producer": {
      "filePath": "$room/producer.lazy.tsx",
      "parent": "/$room"
    },
    "/$room/screen": {
      "filePath": "$room/screen.lazy.tsx",
      "parent": "/$room"
    },
    "/$room/contestant/left": {
      "filePath": "$room/contestant/left.lazy.tsx",
      "parent": "/$room"
    },
    "/$room/contestant/right": {
      "filePath": "$room/contestant/right.lazy.tsx",
      "parent": "/$room"
    }
  }
}
ROUTE_MANIFEST_END */
